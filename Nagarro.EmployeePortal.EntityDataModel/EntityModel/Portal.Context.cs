//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nagarro.EmployeePortal.EntityDataModel.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class EmployeePortal2017Entities : DbContext
    {
        public EmployeePortal2017Entities()
            : base("name=EmployeePortal2017Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Department> Departments { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<IssueHistory> IssueHistories { get; set; }
        public DbSet<Issue> Issues { get; set; }
        public DbSet<Notice> Notices { get; set; }
        public DbSet<User> Users { get; set; }
    
        public virtual int CreateEmployee(string firstName, string lastName, string email, string dateOfJoining, Nullable<int> department, string password, Nullable<bool> isAdmin, ObjectParameter id)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dateOfJoiningParameter = dateOfJoining != null ?
                new ObjectParameter("DateOfJoining", dateOfJoining) :
                new ObjectParameter("DateOfJoining", typeof(string));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateEmployee", firstNameParameter, lastNameParameter, emailParameter, dateOfJoiningParameter, departmentParameter, passwordParameter, isAdminParameter, id);
        }
    
        public virtual int CreateIssue(string title, string description, Nullable<int> postedBy, Nullable<int> priority, ObjectParameter id)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateIssue", titleParameter, descriptionParameter, postedByParameter, priorityParameter, id);
        }
    
        public virtual ObjectResult<GetAllIssuesByEmployeeId_Result> GetAllIssuesByEmployeeId(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllIssuesByEmployeeId_Result>("GetAllIssuesByEmployeeId", empIdParameter);
        }
    
        public virtual ObjectResult<GetIssueHistoryByIssueId_Result> GetIssueHistoryByIssueId(Nullable<int> issueId)
        {
            var issueIdParameter = issueId.HasValue ?
                new ObjectParameter("IssueId", issueId) :
                new ObjectParameter("IssueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIssueHistoryByIssueId_Result>("GetIssueHistoryByIssueId", issueIdParameter);
        }
    
        public virtual ObjectResult<SearchEmployee_Result> SearchEmployee(string firstName, string lastName, string email, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> department, Nullable<bool> checkTerminationDate)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var checkTerminationDateParameter = checkTerminationDate.HasValue ?
                new ObjectParameter("checkTerminationDate", checkTerminationDate) :
                new ObjectParameter("checkTerminationDate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchEmployee_Result>("SearchEmployee", firstNameParameter, lastNameParameter, emailParameter, beginDateParameter, endDateParameter, departmentParameter, checkTerminationDateParameter);
        }
    }
}
